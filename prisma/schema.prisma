generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  anonname  String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  email  String   @unique
  photo     String?  
  location  String   @default("")
  posts     Post[]
  comments  Comments[]
  postlikes     PostLike[]
  commentlikes   CommentLike[]
  bookmarks    Bookmarks[]
  // category     Category[]
}

model Post {
  id        String   @id @default(uuid())
  intId   Int      @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String   @db.VarChar(165)
  content   String
  author    User       @relation(fields: [authorId], references: [id])
  deleted   Boolean  @default(false)
  postimage  String?   
  authorId   String
  comments   Comments[]
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  likes       PostLike[]
  trending    Trending?
  bookmarks  Bookmarks[]
  likesCount Int       @default(0)
  //@@index([authorId,id])
}

model Comments {
  id        String   @id @default(uuid())
  text     String    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post       Post    @relation(fields: [postId], references: [id])
  commenter    User    @relation(fields: [commenterId], references: [id])
  commenterId  String
  postId     String
  likes    CommentLike[]
}

//consider making the title field below unique
model Category {
  id    String   @id @default(uuid())
  title  String
  posts   Post[]
  // author    User?       @relation(fields: [authorId], references: [id]) 
  // authorId   String  
}

model PostLike {
  id   String  @id @default(uuid())
  user User  @relation(fields: [userId], references: [id])
  userId   String
  post   Post?  @relation(fields: [postId], references: [id])
  postId    String   
}

model CommentLike {
  id   String  @id @default(uuid())
  user User  @relation(fields: [userId], references: [id])
  userId   String
  comment    Comments?   @relation(fields: [commentId], references: [id])
  commentId    String   
}

model Trending {
  id        String      @id @default(uuid())
  post      Post        @relation(fields: [postId], references: [id])
  postId    String      @unique
  createdAt DateTime    @default(now())
}

model Bookmarks {
  id   String  @id @default(uuid())
  user User  @relation(fields: [userId], references: [id])
  userId   String
  post   Post  @relation(fields: [postId], references: [id])
  postId    String   
}